name: Publish Semantic Release

on:
  push:
    branches:
      - main

jobs:
  update-package-json-version:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm clean-install

      - name: Determine the new version number
        run: |
          npx semantic-release --dry-run
          NEW_VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed 's/.*is //')
          echo "New version number: $NEW_VERSION"
          echo "NEW_VERSION=$(NEW_VERSION)" >> $GITHUB_ENV

      - name: Read the current version number
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "Current version number: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$(CURRENT_VERSION)" >> $GITHUB_ENV

      - name: Commit update version
        if: steps.new-version.outputs.version != steps.current-version.outputs.version
        run: |
          jq '.version="'$VERSION'"' package.json > temp.json && mv temp.json package.json
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: update version to $VERSION"
          git push origin HEAD:${{ github.head_ref }}
          echo "LAST_COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "IS_VERSION_UPDATE_COMMIT_COMLETED=true" >> $GITHUB_ENV

      - name: Revert "Commit update version" on failure
        if: failure() && env.IS_VERSION_UPDATE_COMMIT_COMLETED
        run: |
          git reset --hard ${{ env.LAST_COMMIT_SHA }}^
          git push origin HEAD:${{ github.ref }} --force

  release:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm clean-install

      - name: Semantic Release
        run: |
          npx semantic-release
          echo "IS_SEMANTIC_RELEASE_COMLETED=true" >> $GITHUB_ENV

      - name: Publish
        if: success()
        run: |
          npm run publish-release
          echo "IS_PUBLISH_COMLETED=true" >> $GITHUB_ENV

      - name: Revert "Publish" on failure
        if: failure() && env.IS_PUBLISH_COMLETED
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VERSION }}" \
            | jq -r '.id')
          if [ "$RELEASE_ID" != "null" ]; then
            curl -s -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          fi

      - name: Revert "Semantic Release" on failure
        if: failure() && env.IS_SEMANTIC_RELEASE_COMLETED
        run: |
          git push --delete origin v${{ env.VERSION }}
          git tag -d v${{ env.VERSION }}
